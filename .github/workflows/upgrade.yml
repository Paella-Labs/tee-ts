name: "Upgrade Phala Cloud CVM"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to upgrade"
        required: true
        type: choice
        options:
          - development
          - staging
          - production
        default: "staging"
      app-id:
        description: "App ID of the CVM to upgrade (optional - will auto-detect based on environment if not provided)"
        required: false
        type: string
      skip-env:
        description: "Skip environment variables during upgrade"
        required: false
        default: false
        type: boolean

jobs:
  upgrade-cvm:
    runs-on: ubuntu-latest
    name: "Upgrade CVM"

    outputs:
      cvm-id: ${{ steps.upgrade.outputs.cvm-id }}
      app-id: ${{ steps.upgrade.outputs.app-id }}
      cvm-name: ${{ steps.upgrade.outputs.cvm-name }}
      deployment-status: ${{ steps.upgrade.outputs.deployment-status }}
      deployment-url: ${{ steps.upgrade.outputs.deployment-url }}
      operation: ${{ steps.upgrade.outputs.operation }}
      environment: ${{ steps.upgrade.outputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install yq and jq
        shell: bash
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          sudo apt-get update && sudo apt-get install -y jq

      - name: Prepare Environment Variables
        shell: bash
        run: |
          set -e

          if [[ "${{ inputs.skip-env }}" == "true" ]]; then
            echo "Skipping environment variables as requested"
            echo "ENV_FLAG=--skip-env" >> $GITHUB_ENV
          else
            # Determine which env file secret to use based on environment
            ENV_SECRET=""
            case "${{ inputs.environment }}" in
              "development")
                ENV_SECRET="${{ secrets.DEV_ENV_FILE }}"
                ENV_SECRET_NAME="DEV_ENV_FILE"
                ;;
              "staging")
                ENV_SECRET="${{ secrets.STAGING_ENV_FILE }}"
                ENV_SECRET_NAME="STAGING_ENV_FILE"
                ;;
              "production")
                ENV_SECRET="${{ secrets.PRODUCTION_ENV_FILE }}"
                ENV_SECRET_NAME="PRODUCTION_ENV_FILE"
                ;;
              *)
                echo "‚ùå Unknown environment: ${{ inputs.environment }}"
                exit 1
                ;;
            esac
            
            if [[ -n "$ENV_SECRET" ]]; then
              echo "Processing environment variables from $ENV_SECRET_NAME secret"
              
              # Parse JSON and convert to dotenv format
              echo "$ENV_SECRET" | jq -r 'to_entries[] | "\(.key)=\(.value)"' > .env
              
              echo "Environment file created:"
              echo "--- .env content (values masked) ---"
              sed 's/=.*/=***/' .env
              echo "--- end of .env ---"
              
              echo "ENV_FLAG=-e .env" >> $GITHUB_ENV
            else
              echo "‚ö†Ô∏è  Warning: $ENV_SECRET_NAME secret not found for ${{ inputs.environment }} environment"
              echo "No environment variables will be applied"
              echo "ENV_FLAG=" >> $GITHUB_ENV
            fi
          fi

      - name: Detect App ID
        shell: bash
        run: |
          set -e
          cd $GITHUB_WORKSPACE

          # Install Phala CLI
          bun install -g phala

          # Authenticate with Phala Cloud
          phala auth login "${{ secrets.PHALA_API_KEY }}"

          # Determine the App ID to use
          if [[ -n "${{ inputs.app-id }}" ]]; then
            APP_ID="${{ inputs.app-id }}"
            echo "Using provided App ID: $APP_ID"
          else
            echo "No App ID provided, auto-detecting ${{ inputs.environment }} CVM..."
            
            # Create search pattern based on environment
            case "${{ inputs.environment }}" in
              "development")
                SEARCH_PATTERN="Development"
                ;;
              "staging")
                SEARCH_PATTERN="Staging"
                ;;
              "production")
                SEARCH_PATTERN="Production"
                ;;
              *)
                echo "‚ùå Unknown environment: ${{ inputs.environment }}"
                exit 1
                ;;
            esac
            
            echo "Searching for CVM with '$SEARCH_PATTERN' in the name..."
            
            # List CVMs and find the one with the environment pattern in the name
            APP_ID_HASH=$(phala cvms list | grep "^‚îÇ Name.*$SEARCH_PATTERN" -A 2 | grep '^‚îÇ App ID' | sed -E 's/.*app_([a-f0-9]+).*/\1/' || echo "")
            
            if [[ -n "$APP_ID_HASH" ]]; then
              echo "Found ${{ inputs.environment }} CVM with App ID hash: $APP_ID_HASH"
              APP_ID="$APP_ID_HASH"
            else
              echo "‚ùå No CVM with '$SEARCH_PATTERN' in the name found!"
              echo "Available CVMs:"
              phala cvms list
              exit 1
            fi
          fi

          # Store the App ID for the next step
          echo "DETECTED_APP_ID=$APP_ID" >> $GITHUB_ENV
          echo "Using App ID: $APP_ID"

      - name: Pre-check CVM Status
        shell: bash
        run: |
          set -e

          echo "üîç Checking CVM status before upgrade..."

          # Get CVM details
          CVM_OUTPUT=$(phala cvms list)
          echo "$CVM_OUTPUT"

          # Extract CVM info for our specific App ID
          CVM_INFO=$(echo "$CVM_OUTPUT" | grep -A 10 -B 2 "app_$DETECTED_APP_ID" || echo "")

          if [[ -z "$CVM_INFO" ]]; then
            echo "‚ùå CVM with App ID $DETECTED_APP_ID not found!"
            exit 1
          fi

          # Extract status
          STATUS=$(echo "$CVM_INFO" | grep "^‚îÇ Status" | sed -E 's/.*‚îÇ\s*([^‚îÇ\s]+)\s*‚îÇ.*/\1/' || echo "unknown")

          # Extract name
          CVM_NAME=$(echo "$CVM_INFO" | grep "^‚îÇ Name" | sed -E 's/.*‚îÇ\s*([^‚îÇ]+)\s*‚îÇ.*/\1/' | xargs || echo "unknown")

          echo "üìã CVM Details:"
          echo "  Name: $CVM_NAME"
          echo "  App ID: $DETECTED_APP_ID"
          echo "  Status: $STATUS"
          echo "  Environment: ${{ inputs.environment }}"

          if [[ "$STATUS" != "running" ]]; then
            echo "‚ö†Ô∏è  Warning: CVM status is '$STATUS', not 'running'"
            echo "Proceeding with upgrade anyway..."
          else
            echo "‚úÖ CVM is running and ready for upgrade"
          fi

          # Store CVM name for later use
          echo "DETECTED_CVM_NAME=$CVM_NAME" >> $GITHUB_ENV

      - name: Check app is allowed on chain
        shell: bash
        run: |
          set -e

          echo "üîó Checking if app is allowed on chain..."
          echo "App ID: $DETECTED_APP_ID"
          echo "Environment: ${{ inputs.environment }}"

          # TODO: Add actual chain verification logic here
          # We need to call our contract to see if the compose hash is allowed

          echo "‚úÖ App allowlist check completed"

      - name: Upgrade Phala Cloud CVM
        id: upgrade
        shell: bash
        run: |
          set -e
          cd $GITHUB_WORKSPACE

          echo "Upgrading ${{ inputs.environment }} CVM with App ID: $DETECTED_APP_ID"
          echo "CVM Name: $DETECTED_CVM_NAME"
          echo "Environment flag: $ENV_FLAG"

          # Build the upgrade command
          UPGRADE_CMD="phala cvms upgrade $ENV_FLAG $DETECTED_APP_ID"

          # Print the exact command that will be executed
          echo "üöÄ Executing command:"
          echo "$UPGRADE_CMD"

          # Upgrade the CVM using the stored command
          output=$(eval "$UPGRADE_CMD")

          # Save output to a temporary file for parsing
          echo "$output" > /tmp/phala_output.txt
          echo "Phala CLI Output:"
          cat /tmp/phala_output.txt

          # Set outputs
          echo "cvm-id=$DETECTED_APP_ID" >> $GITHUB_OUTPUT
          echo "app-id=$DETECTED_APP_ID" >> $GITHUB_OUTPUT
          echo "cvm-name=$DETECTED_CVM_NAME" >> $GITHUB_OUTPUT
          echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT

          # Extract App URL or construct it
          app_url=$(grep -oP "App URL\s*‚îÇ\s*\K[^‚îÇ]+" /tmp/phala_output.txt | tr -d ' ' || echo "https://cloud.phala.network/dashboard/cvms/$DETECTED_APP_ID")
          echo "deployment-url=$app_url" >> $GITHUB_OUTPUT

          # Set deployment status based on success
          echo "deployment-status=success" >> $GITHUB_OUTPUT
          echo "operation=update" >> $GITHUB_OUTPUT

          echo "‚úÖ ${{ inputs.environment }} CVM upgrade completed successfully!"
          echo "üîó App URL: $app_url"

      - name: Safety Check - Health Endpoint
        id: safety-check
        if: ${{ inputs.environment == 'staging' || inputs.environment == 'production' }}
        shell: bash
        run: |
          set -e

          # Determine the health endpoint based on environment
          if [[ "${{ inputs.environment }}" == "staging" ]]; then
            HEALTH_URL="https://staging-tee.crossmint.com/health"
          elif [[ "${{ inputs.environment }}" == "production" ]]; then
            HEALTH_URL="https://tee.crossmint.com/health"
          fi

          echo "üè• Starting health check for ${{ inputs.environment }} environment"
          echo "üîó Health endpoint: $HEALTH_URL"
          echo "‚è±Ô∏è  Will check for 2 minutes..."

          # Health check loop
          START_TIME=$(date +%s)
          TIMEOUT=120  # 2 minutes
          CHECK_INTERVAL=10  # Check every 10 seconds
          SUCCESS=false

          while true; do
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))
            
            if [[ $ELAPSED -ge $TIMEOUT ]]; then
              echo "‚è∞ Timeout reached (2 minutes)"
              break
            fi
            
            echo "üîç Checking health... (${ELAPSED}s elapsed)"
            
            # Make the health check request
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL" || echo "000")
            
            if [[ "$HTTP_STATUS" == "200" ]]; then
              echo "‚úÖ Health check passed! Received HTTP 200"
              echo "üéâ ${{ inputs.environment }} deployment is healthy and responding"
              SUCCESS=true
              break
            else
              echo "‚ùå Health check failed. HTTP status: $HTTP_STATUS"
              echo "‚è≥ Waiting ${CHECK_INTERVAL} seconds before next check..."
              sleep $CHECK_INTERVAL
            fi
          done

          if [[ "$SUCCESS" == "true" ]]; then
            echo "HEALTH_CHECK_STATUS=success" >> $GITHUB_OUTPUT
            echo "HEALTH_CHECK_MESSAGE=Health endpoint responding with HTTP 200" >> $GITHUB_OUTPUT
          else
            echo "HEALTH_CHECK_STATUS=failed" >> $GITHUB_OUTPUT
            echo "HEALTH_CHECK_MESSAGE=Health endpoint did not respond with HTTP 200 within 2 minutes" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  Warning: Health check failed, but upgrade was completed"
            echo "üîß Please manually verify the deployment at: $HEALTH_URL"
          fi

      - name: Display Results
        shell: bash
        run: |
          echo "## üöÄ CVM Upgrade Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | \`${{ steps.upgrade.outputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **CVM ID** | ${{ steps.upgrade.outputs.cvm-id }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **App ID** | ${{ steps.upgrade.outputs.app-id }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **CVM Name** | ${{ steps.upgrade.outputs.cvm-name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Status** | ${{ steps.upgrade.outputs.deployment-status }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Operation** | ${{ steps.upgrade.outputs.operation }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deployment URL** | [${{ steps.upgrade.outputs.deployment-url }}](${{ steps.upgrade.outputs.deployment-url }}) |" >> $GITHUB_STEP_SUMMARY

          # Add health check results if applicable
          if [[ "${{ inputs.environment }}" == "staging" || "${{ inputs.environment }}" == "production" ]]; then
            HEALTH_STATUS="${{ steps.safety-check.outputs.HEALTH_CHECK_STATUS || 'not-run' }}"
            HEALTH_MESSAGE="${{ steps.safety-check.outputs.HEALTH_CHECK_MESSAGE || 'Health check was not executed' }}"
            
            if [[ "$HEALTH_STATUS" == "success" ]]; then
              HEALTH_ICON="‚úÖ"
            elif [[ "$HEALTH_STATUS" == "failed" ]]; then
              HEALTH_ICON="‚ö†Ô∏è"
            else
              HEALTH_ICON="‚ùì"
            fi
            
            echo "| **Health Check** | $HEALTH_ICON $HEALTH_STATUS |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Upgrade Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`${{ inputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **App ID Source**: ${{ inputs.app-id != '' && 'Provided manually' || 'Auto-detected from environment' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Skip Environment**: ${{ inputs.skip-env }}" >> $GITHUB_STEP_SUMMARY

          # Determine env secret name for display
          ENV_SECRET_NAME=""
          case "${{ inputs.environment }}" in
            "development")
              ENV_SECRET_NAME="DEV_ENV_FILE"
              HAS_SECRET="${{ secrets.DEV_ENV_FILE != '' }}"
              ;;
            "staging")
              ENV_SECRET_NAME="STAGING_ENV_FILE"
              HAS_SECRET="${{ secrets.STAGING_ENV_FILE != '' }}"
              ;;
            "production")
              ENV_SECRET_NAME="PRODUCTION_ENV_FILE"
              HAS_SECRET="${{ secrets.PRODUCTION_ENV_FILE != '' }}"
              ;;
          esac

          if [[ "${{ inputs.skip-env }}" == "true" ]]; then
            echo "- **Environment Variables**: Skipped" >> $GITHUB_STEP_SUMMARY
          elif [[ "$HAS_SECRET" == "true" ]]; then
            echo "- **Environment Variables**: Loaded from $ENV_SECRET_NAME secret" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Environment Variables**: None ($ENV_SECRET_NAME secret not found)" >> $GITHUB_STEP_SUMMARY
          fi

          # Add health check details if applicable
          if [[ "${{ inputs.environment }}" == "staging" || "${{ inputs.environment }}" == "production" ]]; then
            HEALTH_URL=""
            if [[ "${{ inputs.environment }}" == "staging" ]]; then
              HEALTH_URL="https://staging-tee.crossmint.com/health"
            elif [[ "${{ inputs.environment }}" == "production" ]]; then
              HEALTH_URL="https://tee.crossmint.com/health"
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üè• Health Check Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Health Endpoint**: [$HEALTH_URL]($HEALTH_URL)" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ${{ steps.safety-check.outputs.HEALTH_CHECK_STATUS || 'not-run' }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Message**: ${{ steps.safety-check.outputs.HEALTH_CHECK_MESSAGE || 'Health check was not executed' }}" >> $GITHUB_STEP_SUMMARY
          fi
