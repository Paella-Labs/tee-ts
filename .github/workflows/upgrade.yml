name: "Upgrade Phala Cloud CVM"

on:
  workflow_dispatch:
    inputs:
      app-id:
        description: "App ID of the CVM to upgrade (optional - will auto-detect Staging CVM if not provided)"
        required: false
        type: string
      compose-file:
        description: "Path to the docker-compose.yml file"
        required: false
        default: "./docker-compose.yml"
        type: string
      skip-env:
        description: "Skip environment variables during upgrade"
        required: false
        default: false
        type: boolean

jobs:
  upgrade-cvm:
    runs-on: ubuntu-latest
    name: "Upgrade CVM"

    outputs:
      cvm-id: ${{ steps.upgrade.outputs.cvm-id }}
      app-id: ${{ steps.upgrade.outputs.app-id }}
      cvm-name: ${{ steps.upgrade.outputs.cvm-name }}
      deployment-status: ${{ steps.upgrade.outputs.deployment-status }}
      deployment-url: ${{ steps.upgrade.outputs.deployment-url }}
      operation: ${{ steps.upgrade.outputs.operation }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install yq and jq
        shell: bash
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          sudo apt-get update && sudo apt-get install -y jq

      - name: Prepare Environment Variables
        shell: bash
        run: |
          set -e

          if [[ "${{ inputs.skip-env }}" == "true" ]]; then
            echo "Skipping environment variables as requested"
            echo "ENV_FLAG=--skip-env" >> $GITHUB_ENV
          elif [[ -n "${{ secrets.STAGING_ENV_FILE }}" ]]; then
            echo "Processing environment variables from STAGING_ENV_FILE secret"
            
            # Parse JSON and convert to dotenv format
            echo '${{ secrets.STAGING_ENV_FILE }}' | jq -r 'to_entries[] | "\(.key)=\(.value)"' > .env
            
            echo "Environment file created:"
            echo "--- .env content (values masked) ---"
            sed 's/=.*/=***/' .env
            echo "--- end of .env ---"
            
            echo "ENV_FLAG=-e .env" >> $GITHUB_ENV
          else
            echo "No environment variables provided and skip-env is false"
            echo "ENV_FLAG=" >> $GITHUB_ENV
          fi

      - name: Detect App ID
        shell: bash
        run: |
          set -e
          cd $GITHUB_WORKSPACE

          # Install Phala CLI
          bun install -g phala

          # Authenticate with Phala Cloud
          phala auth login "${{ secrets.PHALA_API_KEY }}"

          # Determine the App ID to use
          if [[ -n "${{ inputs.app-id }}" ]]; then
            APP_ID="${{ inputs.app-id }}"
            echo "Using provided App ID: $APP_ID"
          else
            echo "No App ID provided, auto-detecting Staging CVM..."
            
            # List CVMs and find the one with "Staging" in the name
            APP_ID_HASH=$(phala cvms list | grep '^│ Name.*Staging' -A 2 | grep '^│ App ID' | sed -E 's/.*app_([a-f0-9]+).*/\1/' || echo "")
            
            if [[ -n "$APP_ID_HASH" ]]; then
              echo "Found Staging CVM with App ID hash: $APP_ID_HASH"
              APP_ID="$APP_ID_HASH"
            else
              echo "❌ No CVM with 'Staging' in the name found!"
              echo "Available CVMs:"
              phala cvms list
              exit 1
            fi
          fi

          # Store the App ID for the next step
          echo "DETECTED_APP_ID=$APP_ID" >> $GITHUB_ENV
          echo "Using App ID: $APP_ID"

      - name: Upgrade Phala Cloud CVM
        id: upgrade
        shell: bash
        run: |
          set -e
          cd $GITHUB_WORKSPACE

          echo "Upgrading CVM with App ID: $DETECTED_APP_ID"
          echo "Using compose file: ${{ inputs.compose-file }}"
          echo "Environment flag: $ENV_FLAG"

          # Build the upgrade command
          UPGRADE_CMD="phala cvms upgrade $DETECTED_APP_ID --compose \"${{ inputs.compose-file }}\" $ENV_FLAG"

          # Print the exact command that will be executed
          echo "🚀 Executing command:"
          echo "$UPGRADE_CMD"

          # Upgrade the CVM using the stored command
          output=$(eval "$UPGRADE_CMD")

          # Save output to a temporary file for parsing
          echo "$output" > /tmp/phala_output.txt
          echo "Phala CLI Output:"
          cat /tmp/phala_output.txt

          # Set outputs
          echo "cvm-id=$DETECTED_APP_ID" >> $GITHUB_OUTPUT
          echo "app-id=$DETECTED_APP_ID" >> $GITHUB_OUTPUT

          # Try to extract CVM name from output or use app-id as fallback
          cvm_name=$(grep -oP "CVM Name\s*│\s*\K[^│]+" /tmp/phala_output.txt | tr -d ' ' || echo "$DETECTED_APP_ID")
          echo "cvm-name=$cvm_name" >> $GITHUB_OUTPUT

          # Extract App URL or construct it
          app_url=$(grep -oP "App URL\s*│\s*\K[^│]+" /tmp/phala_output.txt | tr -d ' ' || echo "https://cloud.phala.network/dashboard/cvms/$DETECTED_APP_ID")
          echo "deployment-url=$app_url" >> $GITHUB_OUTPUT

          # Set deployment status based on success
          echo "deployment-status=success" >> $GITHUB_OUTPUT
          echo "operation=update" >> $GITHUB_OUTPUT

          echo "✅ CVM upgrade completed successfully!"
          echo "🔗 App URL: $app_url"

      - name: Display Results
        shell: bash
        run: |
          echo "## 🚀 CVM Upgrade Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **CVM ID** | ${{ steps.upgrade.outputs.cvm-id }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **App ID** | ${{ steps.upgrade.outputs.app-id }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **CVM Name** | ${{ steps.upgrade.outputs.cvm-name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Status** | ${{ steps.upgrade.outputs.deployment-status }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Operation** | ${{ steps.upgrade.outputs.operation }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deployment URL** | [${{ steps.upgrade.outputs.deployment-url }}](${{ steps.upgrade.outputs.deployment-url }}) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Upgrade Details" >> $GITHUB_STEP_SUMMARY
          echo "- **App ID Source**: ${{ inputs.app-id != '' && 'Provided manually' || 'Auto-detected from Staging CVM' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Compose File**: \`${{ inputs.compose-file }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Skip Environment**: ${{ inputs.skip-env }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment Variables**: ${{ secrets.STAGING_ENV_FILE != '' && 'Loaded from STAGING_ENV_FILE secret' || 'None' }}" >> $GITHUB_STEP_SUMMARY
