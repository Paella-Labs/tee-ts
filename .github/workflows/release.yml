name: Release

on:
  push:
    tags:
      - "v*"

env:
  TEE_IMAGE_NAME: xmregistry/crossmint-ts-tee
  NGINX_IMAGE_NAME: xmregistry/crossmint-ts-tee-nginx

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests
        run: bun test

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for this version
            awk '/^## \['"${{ steps.version.outputs.VERSION }}"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
          else
            echo "Release ${{ steps.version.outputs.VERSION }}" > release_notes.md
            echo "" >> release_notes.md
            echo "Changes in this release:" >> release_notes.md
            git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for TEE image
        id: meta-tee
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.TEE_IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Extract metadata for Nginx image
        id: meta-nginx
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.NGINX_IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push TEE Docker image
        id: build-tee
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-tee.outputs.tags }}
          labels: ${{ steps.meta-tee.outputs.labels }}
          cache-from: type=gha,scope=tee
          cache-to: type=gha,mode=max,scope=tee

      - name: Build and push Nginx Docker image
        id: build-nginx
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./nginx.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-nginx.outputs.tags }}
          labels: ${{ steps.meta-nginx.outputs.labels }}
          cache-from: type=gha,scope=nginx
          cache-to: type=gha,mode=max,scope=nginx

      - name: Generate release artifacts
        run: |
          # Create releases directory if it doesn't exist
          mkdir -p releases

          # Extract image digests
          TEE_DIGEST="${{ steps.build-tee.outputs.digest }}"
          NGINX_DIGEST="${{ steps.build-nginx.outputs.digest }}"

          # Get the primary version tag (without v prefix)
          VERSION="${{ steps.version.outputs.VERSION }}"
          PRIMARY_TEE_TAG="${{ env.TEE_IMAGE_NAME }}:${VERSION}"
          PRIMARY_NGINX_TAG="${{ env.NGINX_IMAGE_NAME }}:${VERSION}"

          # Create docker-compose.yml with specific version tags
          # Replace the entire image line for both services
          sed -E "
              s|image: \\\$\{DOCKER_IMAGE:-[^}]*\}|image: ${PRIMARY_TEE_TAG}|g;
              s|image: \\\$\{NGINX_DOCKER_IMAGE:-[^}]*\}|image: ${PRIMARY_NGINX_TAG}|g
          " docker-compose.yml > "releases/v${VERSION}-docker-compose.yml"

          # Generate app-compose.json using echo -n to avoid trailing newline, and according to structure found by looking at the compose file and hash exposed by Phala cloud
          echo -n '{"bash_script":null,"docker_compose_file":"services:\n  tee-ts:\n    image: ${DOCKER_IMAGE}\n    container_name: tee-ts\n    restart: unless-stopped\n    healthcheck:\n      test:\n        [\n          \"CMD\",\n          \"wget\",\n          \"--no-verbose\",\n          \"--tries=1\",\n          \"--spider\",\n          \"http://localhost/health\",\n        ]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 10s\n    environment:\n      - GRANT_SUDO=yes\n      - PORT=3000\n      - SENDGRID_API_KEY=${SENDGRID_API_KEY}\n      - SENDGRID_EMAIL_TEMPLATE_ID=${SENDGRID_EMAIL_TEMPLATE_ID}\n      - MOCK_TEE_SECRET=${MOCK_TEE_SECRET}\n      - ACCESS_SECRET=${ACCESS_SECRET}\n      - DD_SERVICE=${DD_SERVICE}\n      - DD_ENV=${DD_ENV}\n      - DD_VERSION=${DD_VERSION}\n      - DATADOG_API_KEY=${DATADOG_API_KEY}\n      - DD_METRICS_ENABLED=${DD_METRICS_ENABLED:-true}\n    user: root\n    volumes:\n      - /var/run/tappd.sock:/var/run/tappd.sock\n    networks:\n      - tee-ts-network\n\n  nginx:\n    image: ${NGINX_DOCKER_IMAGE}\n    container_name: nginx-proxy\n    restart: unless-stopped\n    healthcheck:\n      test:\n        [\n          \"CMD\",\n          \"wget\",\n          \"--no-verbose\",\n          \"--tries=1\",\n          \"--spider\",\n          \"http://localhost/health\",\n        ]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 10s\n    ports:\n      - \"443:443\"\n    environment:\n      - SSL_CERTIFICATE=${SSL_CERTIFICATE}\n      - SSL_CERTIFICATE_KEY=${SSL_CERTIFICATE_KEY}\n    volumes:\n      - /var/run/tappd.sock:/var/run/tappd.sock\n    depends_on:\n      - tee-ts\n    networks:\n      - tee-ts-network\n\nnetworks:\n  tee-ts-network:\n    driver: bridge\n","docker_config":{"password":"","registry":null,"username":""},"features":["kms","tproxy-net"],"kms_enabled":true,"manifest_version":1,"name":"app_0ade7b12204222a684b6e8e26aa5223f38e90725","pre_launch_script":"\n#!/bin/bash\necho \"----------------------------------------------\"\necho \"Running Phala Cloud Pre-Launch Script v0.0.2\"\necho \"----------------------------------------------\"\nset -e\n\n# Function: Perform Docker cleanup\nperform_cleanup() {\n    echo \"Pruning unused images\"\n    docker image prune -af\n    echo \"Pruning unused volumes\"\n    docker volume prune -f\n}\n\n# Function: Check Docker login status without exposing credentials\ncheck_docker_login() {\n    # Try to verify login status without exposing credentials\n    if docker info 2>/dev/null | grep -q \"Username\"; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n# Function: Check AWS ECR login status\ncheck_ecr_login() {\n    # Check if we can access the registry without exposing credentials\n    if aws ecr get-authorization-token --region $DSTACK_AWS_REGION &>/dev/null; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n# Main logic starts here\necho \"Starting login process...\"\n\n# Check if Docker credentials exist\nif [[ -n \"$DSTACK_DOCKER_USERNAME\" && -n \"$DSTACK_DOCKER_PASSWORD\" ]]; then\n    echo \"Docker credentials found\"\n    \n    # Check if already logged in\n    if check_docker_login; then\n        echo \"Already logged in to Docker registry\"\n    else\n        echo \"Logging in to Docker registry...\"\n        # Login without exposing password in process list\n        if [[ -n \"$DSTACK_DOCKER_REGISTRY\" ]]; then\n            echo \"$DSTACK_DOCKER_PASSWORD\" | docker login -u \"$DSTACK_DOCKER_USERNAME\" --password-stdin \"$DSTACK_DOCKER_REGISTRY\"\n        else\n            echo \"$DSTACK_DOCKER_PASSWORD\" | docker login -u \"$DSTACK_DOCKER_USERNAME\" --password-stdin\n        fi\n        \n        if [ $? -eq 0 ]; then\n            echo \"Docker login successful\"\n        else\n            echo \"Docker login failed\"\n            exit 1\n        fi\n    fi\n# Check if AWS ECR credentials exist\nelif [[ -n \"$DSTACK_AWS_ACCESS_KEY_ID\" && -n \"$DSTACK_AWS_SECRET_ACCESS_KEY\" && -n \"$DSTACK_AWS_REGION\" && -n \"$DSTACK_AWS_ECR_REGISTRY\" ]]; then\n    echo \"AWS ECR credentials found\"\n    \n    # Check if AWS CLI is installed\n    if ! command -v aws &> /dev/null; then\n        echo \"AWS CLI not installed, installing...\"\n        curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.24.14.zip\" -o \"awscliv2.zip\"\n        echo \"6ff031a26df7daebbfa3ccddc9af1450 awscliv2.zip\" | md5sum -c\n        if [ $? -ne 0 ]; then\n            echo \"MD5 checksum failed\"\n            exit 1\n        fi\n        unzip awscliv2.zip &> /dev/null\n        ./aws/install\n        \n        # Clean up installation files\n        rm -rf awscliv2.zip aws\n    else\n        echo \"AWS CLI is already installed: $(which aws)\"\n    fi\n    \n    # Configure AWS CLI\n    aws configure set aws_access_key_id \"$DSTACK_AWS_ACCESS_KEY_ID\"\n    aws configure set aws_secret_access_key \"$DSTACK_AWS_SECRET_ACCESS_KEY\"\n    aws configure set default.region $DSTACK_AWS_REGION\n    echo \"Logging in to AWS ECR...\"\n    aws ecr get-login-password --region $DSTACK_AWS_REGION | docker login --username AWS --password-stdin \"$DSTACK_AWS_ECR_REGISTRY\"\n    if [ $? -eq 0 ]; then\n        echo \"AWS ECR login successful\"\n    else\n        echo \"AWS ECR login failed\"\n        exit 1\n    fi\nfi\n\nperform_cleanup\n\necho \"----------------------------------------------\"\necho \"Script execution completed\"\necho \"----------------------------------------------\"\n","public_logs":true,"public_sysinfo":true,"runner":"docker-compose","salt":null,"tproxy_enabled":true,"version":"1.0.0"}' > "releases/v${VERSION}-app-compose.json"
          
          # Calculate app-compose hash
          COMPOSE_HASH=$(sha256sum "releases/v${VERSION}-app-compose.json" | cut -d' ' -f1)

          # Generate comprehensive release information
          cat > "releases/v${VERSION}-release-info.json" << EOF
          {
              "version": "v${VERSION}",
              "release_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "git_commit": "${GITHUB_SHA}",
              "git_ref": "${GITHUB_REF}",
              "docker_images": {
                  "tee": {
                      "name": "${{ env.TEE_IMAGE_NAME }}",
                      "primary_tag": "${PRIMARY_TEE_TAG}",
                      "all_tags": $(echo '${{ steps.meta-tee.outputs.tags }}' | jq -R 'split("\n")'),
                      "digest": "${TEE_DIGEST}",
                      "labels": ${{ steps.meta-tee.outputs.labels }}
                  },
                  "nginx": {
                      "name": "${{ env.NGINX_IMAGE_NAME }}",
                      "primary_tag": "${PRIMARY_NGINX_TAG}",
                      "all_tags": $(echo '${{ steps.meta-nginx.outputs.tags }}' | jq -R 'split("\n")'),
                      "digest": "${NGINX_DIGEST}",
                      "labels": ${{ steps.meta-nginx.outputs.labels }}
                  }
              },
              "app_compose": {
                  "file": "v${VERSION}-app-compose.json",
                  "hash": "${COMPOSE_HASH}"
              },
              "docker_compose": {
                  "file": "v${VERSION}-docker-compose.yml"
              }
          }
          EOF

          echo "Release artifacts generated:"
          echo "- releases/v${VERSION}-release-info.json"
          echo "- releases/v${VERSION}-app-compose.json (hash: ${COMPOSE_HASH})"
          echo "- releases/v${VERSION}-docker-compose.yml"
          echo ""
          echo "Docker image digests:"
          echo "- TEE: ${TEE_DIGEST}"
          echo "- Nginx: ${NGINX_DIGEST}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
          files: |
            releases/v${{ steps.version.outputs.VERSION }}-release-info.json
            releases/v${{ steps.version.outputs.VERSION }}-app-compose.json
            releases/v${{ steps.version.outputs.VERSION }}-docker-compose.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
