name: Release

on:
  push:
    tags:
      - "v*"

env:
  TEE_IMAGE_NAME: xmregistry/crossmint-ts-tee
  NGINX_IMAGE_NAME: xmregistry/crossmint-ts-tee-nginx

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests
        run: bun test

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for this version
            awk '/^## \['"${{ steps.version.outputs.VERSION }}"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
          else
            echo "Release ${{ steps.version.outputs.VERSION }}" > release_notes.md
            echo "" >> release_notes.md
            echo "Changes in this release:" >> release_notes.md
            git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for TEE image
        id: meta-tee
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.TEE_IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Extract metadata for Nginx image
        id: meta-nginx
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.NGINX_IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push TEE Docker image
        id: build-tee
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-tee.outputs.tags }}
          labels: ${{ steps.meta-tee.outputs.labels }}
          cache-from: type=gha,scope=tee
          cache-to: type=gha,mode=max,scope=tee

      - name: Build and push Nginx Docker image
        id: build-nginx
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./nginx.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-nginx.outputs.tags }}
          labels: ${{ steps.meta-nginx.outputs.labels }}
          cache-from: type=gha,scope=nginx
          cache-to: type=gha,mode=max,scope=nginx

      - name: Generate release artifacts
        run: |
          # Create releases directory if it doesn't exist
          mkdir -p releases

          # Extract image digests
          TEE_DIGEST="${{ steps.build-tee.outputs.digest }}"
          NGINX_DIGEST="${{ steps.build-nginx.outputs.digest }}"

          # Get the primary version tag (without v prefix)
          VERSION="${{ steps.version.outputs.VERSION }}"
          PRIMARY_TEE_TAG="${{ env.TEE_IMAGE_NAME }}:${VERSION}"
          PRIMARY_NGINX_TAG="${{ env.NGINX_IMAGE_NAME }}:${VERSION}"

          # Create docker-compose.yml with specific version tags
          # Replace the entire image line for both services
          sed -E "
              s|image: \\\${DOCKER_IMAGE:-[^}]*}|image: ${PRIMARY_TEE_TAG}|g;
              s|image: \\\${NGINX_DOCKER_IMAGE:-[^}]*}|image: ${PRIMARY_NGINX_TAG}|g
          " docker-compose.yml > "releases/v${VERSION}-docker-compose.yml"

          # Generate app-compose.json
          cat > "releases/v${VERSION}-app-compose.json" << EOF
          {
              "manifest_version": 2,
              "name": "dstack-attestation-example",
              "runner": "docker-compose",
              "docker_compose_file": $(jq -Rs . < "releases/v${VERSION}-docker-compose.yml"),
              "kms_enabled": true,
              "gateway_enabled": true,
              "local_key_provider_enabled": false,
              "key_provider_id": "",
              "public_logs": true,
              "public_sysinfo": true,
              "allowed_envs": [],
              "no_instance_id": false,
              "secure_time": false
          }
          EOF

          # Calculate app-compose hash
          COMPOSE_HASH=$(sha256sum "releases/v${VERSION}-app-compose.json" | cut -d' ' -f1)

          # Generate comprehensive release information
          cat > "releases/v${VERSION}-release-info.json" << EOF
          {
              "version": "v${VERSION}",
              "release_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "git_commit": "${GITHUB_SHA}",
              "git_ref": "${GITHUB_REF}",
              "docker_images": {
                  "tee": {
                      "name": "${{ env.TEE_IMAGE_NAME }}",
                      "primary_tag": "${PRIMARY_TEE_TAG}",
                      "all_tags": $(echo '${{ steps.meta-tee.outputs.tags }}' | jq -R 'split("\n")'),
                      "digest": "${TEE_DIGEST}",
                      "labels": ${{ steps.meta-tee.outputs.labels }}
                  },
                  "nginx": {
                      "name": "${{ env.NGINX_IMAGE_NAME }}",
                      "primary_tag": "${PRIMARY_NGINX_TAG}",
                      "all_tags": $(echo '${{ steps.meta-nginx.outputs.tags }}' | jq -R 'split("\n")'),
                      "digest": "${NGINX_DIGEST}",
                      "labels": ${{ steps.meta-nginx.outputs.labels }}
                  }
              },
              "app_compose": {
                  "file": "v${VERSION}-app-compose.json",
                  "hash": "${COMPOSE_HASH}"
              },
              "docker_compose": {
                  "file": "v${VERSION}-docker-compose.yml"
              }
          }
          EOF

          echo "Release artifacts generated:"
          echo "- releases/v${VERSION}-release-info.json"
          echo "- releases/v${VERSION}-app-compose.json (hash: ${COMPOSE_HASH})"
          echo "- releases/v${VERSION}-docker-compose.yml"
          echo ""
          echo "Docker image digests:"
          echo "- TEE: ${TEE_DIGEST}"
          echo "- Nginx: ${NGINX_DIGEST}"

      - name: Commit release artifacts
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add releases/
          git commit -m "Add release artifacts for v${{ steps.version.outputs.VERSION }}" || exit 0
          git push origin HEAD:main

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
          files: |
            releases/v${{ steps.version.outputs.VERSION }}-release-info.json
            releases/v${{ steps.version.outputs.VERSION }}-app-compose.json
            releases/v${{ steps.version.outputs.VERSION }}-docker-compose.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
