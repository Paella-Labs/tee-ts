name: Release

on:
  push:
    tags:
      - "v*"

env:
  TEE_IMAGE_NAME: xmregistry/crossmint-ts-tee
  NGINX_IMAGE_NAME: xmregistry/crossmint-ts-tee-nginx

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests
        run: bun test

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for this version
            awk '/^## \['"${{ steps.version.outputs.VERSION }}"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
          else
            echo "Release ${{ steps.version.outputs.VERSION }}" > release_notes.md
            echo "" >> release_notes.md
            echo "Changes in this release:" >> release_notes.md
            git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for TEE image
        id: meta-tee
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.TEE_IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Extract metadata for Nginx image
        id: meta-nginx
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.NGINX_IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push TEE Docker image
        id: build-tee
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-tee.outputs.tags }}
          labels: ${{ steps.meta-tee.outputs.labels }}
          cache-from: type=gha,scope=tee
          cache-to: type=gha,mode=max,scope=tee

      - name: Build and push Nginx Docker image
        id: build-nginx
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./nginx.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-nginx.outputs.tags }}
          labels: ${{ steps.meta-nginx.outputs.labels }}
          cache-from: type=gha,scope=nginx
          cache-to: type=gha,mode=max,scope=nginx

      - name: Generate release artifacts
        run: |
          # Create releases directory if it doesn't exist
          mkdir -p releases

          # Extract image digests
          TEE_DIGEST="${{ steps.build-tee.outputs.digest }}"
          NGINX_DIGEST="${{ steps.build-nginx.outputs.digest }}"

          # Get the primary version tag (without v prefix)
          VERSION="${{ steps.version.outputs.VERSION }}"
          PRIMARY_TEE_TAG="${{ env.TEE_IMAGE_NAME }}:${VERSION}"
          PRIMARY_NGINX_TAG="${{ env.NGINX_IMAGE_NAME }}:${VERSION}"

          # Create docker-compose.yml with specific version tags
          # Replace the entire image line for both services
          sed -E "
              s|image: \\\$\{DOCKER_IMAGE:-[^}]*\}|image: ${PRIMARY_TEE_TAG}|g;
              s|image: \\\$\{NGINX_DOCKER_IMAGE:-[^}]*\}|image: ${PRIMARY_NGINX_TAG}|g
          " docker-compose.yml > "releases/v${VERSION}-docker-compose.yml"

          # Generate app-compose.json using Python for proper JSON formatting
          cat > generate_app_compose.py << 'PYEOF'
          import json
          import sys
          
          version = sys.argv[1] if len(sys.argv) > 1 else "unknown"
          
          # Read docker-compose.yml content
          with open('docker-compose.yml', 'r') as f:
              docker_compose_content = f.read()
          
          # Pre-launch script content
          pre_launch_script = """
          #!/bin/bash
          echo "----------------------------------------------"
          echo "Running Phala Cloud Pre-Launch Script v0.0.2"
          echo "----------------------------------------------"
          set -e
          
          # Function: Perform Docker cleanup
          perform_cleanup() {
              echo "Pruning unused images"
              docker image prune -af
              echo "Pruning unused volumes"
              docker volume prune -f
          }
          
          # Function: Check Docker login status without exposing credentials
          check_docker_login() {
              # Try to verify login status without exposing credentials
              if docker info 2>/dev/null | grep -q "Username"; then
                  return 0
              else
                  return 1
              fi
          }
          
          # Function: Check AWS ECR login status
          check_ecr_login() {
              # Check if we can access the registry without exposing credentials
              if aws ecr get-authorization-token --region $DSTACK_AWS_REGION &>/dev/null; then
                  return 0
              else
                  return 1
              fi
          }
          
          # Main logic starts here
          echo "Starting login process..."
          
          # Check if Docker credentials exist
          if [[ -n "$DSTACK_DOCKER_USERNAME" && -n "$DSTACK_DOCKER_PASSWORD" ]]; then
              echo "Docker credentials found"
              
              # Check if already logged in
              if check_docker_login; then
                  echo "Already logged in to Docker registry"
              else
                  echo "Logging in to Docker registry..."
                  # Login without exposing password in process list
                  if [[ -n "$DSTACK_DOCKER_REGISTRY" ]]; then
                      echo "$DSTACK_DOCKER_PASSWORD" | docker login -u "$DSTACK_DOCKER_USERNAME" --password-stdin "$DSTACK_DOCKER_REGISTRY"
                  else
                      echo "$DSTACK_DOCKER_PASSWORD" | docker login -u "$DSTACK_DOCKER_USERNAME" --password-stdin
                  fi
                  
                  if [ $? -eq 0 ]; then
                      echo "Docker login successful"
                  else
                      echo "Docker login failed"
                      exit 1
                  fi
              fi
          # Check if AWS ECR credentials exist
          elif [[ -n "$DSTACK_AWS_ACCESS_KEY_ID" && -n "$DSTACK_AWS_SECRET_ACCESS_KEY" && -n "$DSTACK_AWS_REGION" && -n "$DSTACK_AWS_ECR_REGISTRY" ]]; then
              echo "AWS ECR credentials found"
              
              # Check if AWS CLI is installed
              if ! command -v aws &> /dev/null; then
                  echo "AWS CLI not installed, installing..."
                  curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.24.14.zip" -o "awscliv2.zip"
                  echo "6ff031a26df7daebbfa3ccddc9af1450 awscliv2.zip" | md5sum -c
                  if [ $? -ne 0 ]; then
                      echo "MD5 checksum failed"
                      exit 1
                  fi
                  unzip awscliv2.zip &> /dev/null
                  ./aws/install
                  
                  # Clean up installation files
                  rm -rf awscliv2.zip aws
              else
                  echo "AWS CLI is already installed: $(which aws)"
              fi
              
              # Configure AWS CLI
              aws configure set aws_access_key_id "$DSTACK_AWS_ACCESS_KEY_ID"
              aws configure set aws_secret_access_key "$DSTACK_AWS_SECRET_ACCESS_KEY"
              aws configure set default.region $DSTACK_AWS_REGION
              echo "Logging in to AWS ECR..."
              aws ecr get-login-password --region $DSTACK_AWS_REGION | docker login --username AWS --password-stdin "$DSTACK_AWS_ECR_REGISTRY"
              if [ $? -eq 0 ]; then
                  echo "AWS ECR login successful"
              else
                  echo "AWS ECR login failed"
                  exit 1
              fi
          fi
          
          perform_cleanup
          
          echo "----------------------------------------------"
          echo "Script execution completed"
          echo "----------------------------------------------"
          """
          
          # Create the app-compose object
          app_compose = {
              "bash_script": None,
              "docker_compose_file": docker_compose_content,
              "docker_config": {
                  "password": "",
                  "registry": None,
                  "username": ""
              },
              "features": ["kms", "tproxy-net"],
              "kms_enabled": True,
              "manifest_version": 1,
              "name": "app_0ade7b12204222a684b6e8e26aa5223f38e90725",
              "pre_launch_script": pre_launch_script,
              "public_logs": True,
              "public_sysinfo": True,
              "runner": "docker-compose",
              "salt": None,
              "tproxy_enabled": True,
              "version": "1.0.0"
          }
          
          # Write to file as single line JSON
          with open(f'releases/v{version}-app-compose.json', 'w') as f:
              json.dump(app_compose, f, separators=(',', ':'))
          PYEOF

          python3 generate_app_compose.py ${VERSION}
          rm generate_app_compose.py

          # Calculate app-compose hash
          COMPOSE_HASH=$(sha256sum "releases/v${VERSION}-app-compose.json" | cut -d' ' -f1)

          # Generate comprehensive release information
          cat > "releases/v${VERSION}-release-info.json" << EOF
          {
              "version": "v${VERSION}",
              "release_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "git_commit": "${GITHUB_SHA}",
              "git_ref": "${GITHUB_REF}",
              "docker_images": {
                  "tee": {
                      "name": "${{ env.TEE_IMAGE_NAME }}",
                      "primary_tag": "${PRIMARY_TEE_TAG}",
                      "all_tags": $(echo '${{ steps.meta-tee.outputs.tags }}' | jq -R 'split("\n")'),
                      "digest": "${TEE_DIGEST}",
                      "labels": ${{ steps.meta-tee.outputs.labels }}
                  },
                  "nginx": {
                      "name": "${{ env.NGINX_IMAGE_NAME }}",
                      "primary_tag": "${PRIMARY_NGINX_TAG}",
                      "all_tags": $(echo '${{ steps.meta-nginx.outputs.tags }}' | jq -R 'split("\n")'),
                      "digest": "${NGINX_DIGEST}",
                      "labels": ${{ steps.meta-nginx.outputs.labels }}
                  }
              },
              "app_compose": {
                  "file": "v${VERSION}-app-compose.json",
                  "hash": "${COMPOSE_HASH}"
              },
              "docker_compose": {
                  "file": "v${VERSION}-docker-compose.yml"
              }
          }
          EOF

          echo "Release artifacts generated:"
          echo "- releases/v${VERSION}-release-info.json"
          echo "- releases/v${VERSION}-app-compose.json (hash: ${COMPOSE_HASH})"
          echo "- releases/v${VERSION}-docker-compose.yml"
          echo ""
          echo "Docker image digests:"
          echo "- TEE: ${TEE_DIGEST}"
          echo "- Nginx: ${NGINX_DIGEST}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
          files: |
            releases/v${{ steps.version.outputs.VERSION }}-release-info.json
            releases/v${{ steps.version.outputs.VERSION }}-app-compose.json
            releases/v${{ steps.version.outputs.VERSION }}-docker-compose.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
