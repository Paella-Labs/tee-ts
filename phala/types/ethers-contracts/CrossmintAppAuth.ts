/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IAppAuth {
  export type AppBootInfoStruct = {
    appId: string;
    composeHash: BytesLike;
    instanceId: string;
    deviceId: BytesLike;
    mrAggregated: BytesLike;
    mrSystem: BytesLike;
    mrImage: BytesLike;
    tcbStatus: string;
    advisoryIds: string[];
  };

  export type AppBootInfoStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[]
  ] & {
    appId: string;
    composeHash: string;
    instanceId: string;
    deviceId: string;
    mrAggregated: string;
    mrSystem: string;
    mrImage: string;
    tcbStatus: string;
    advisoryIds: string[];
  };
}

export interface CrossmintAppAuthInterface extends utils.Interface {
  functions: {
    "UPGRADE_INTERFACE_VERSION()": FunctionFragment;
    "addComposeHash(bytes32)": FunctionFragment;
    "addDevice(bytes32)": FunctionFragment;
    "allowAnyDevice()": FunctionFragment;
    "allowedComposeHashes(bytes32)": FunctionFragment;
    "allowedDeviceIds(bytes32)": FunctionFragment;
    "appId()": FunctionFragment;
    "disableUpgrades()": FunctionFragment;
    "initialize(address,address,bool,bool)": FunctionFragment;
    "isAppAllowed((address,bytes32,address,bytes32,bytes32,bytes32,bytes32,string,string[]))": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeComposeHash(bytes32)": FunctionFragment;
    "removeDevice(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAllowAnyDevice(bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "UPGRADE_INTERFACE_VERSION"
      | "addComposeHash"
      | "addDevice"
      | "allowAnyDevice"
      | "allowedComposeHashes"
      | "allowedDeviceIds"
      | "appId"
      | "disableUpgrades"
      | "initialize"
      | "isAppAllowed"
      | "owner"
      | "proxiableUUID"
      | "removeComposeHash"
      | "removeDevice"
      | "renounceOwnership"
      | "setAllowAnyDevice"
      | "transferOwnership"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addComposeHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addDevice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowAnyDevice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedComposeHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedDeviceIds",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disableUpgrades",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isAppAllowed",
    values: [IAppAuth.AppBootInfoStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeComposeHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDevice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowAnyDevice",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addComposeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addDevice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowAnyDevice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedComposeHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedDeviceIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableUpgrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAppAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeComposeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDevice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowAnyDevice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AllowAnyDeviceSet(bool)": EventFragment;
    "ComposeHashAdded(bytes32)": EventFragment;
    "ComposeHashRemoved(bytes32)": EventFragment;
    "DeviceAdded(bytes32)": EventFragment;
    "DeviceRemoved(bytes32)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "UpgradesDisabled()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowAnyDeviceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComposeHashAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComposeHashRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeviceAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeviceRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradesDisabled"): EventFragment;
}

export interface AllowAnyDeviceSetEventObject {
  allowAny: boolean;
}
export type AllowAnyDeviceSetEvent = TypedEvent<
  [boolean],
  AllowAnyDeviceSetEventObject
>;

export type AllowAnyDeviceSetEventFilter =
  TypedEventFilter<AllowAnyDeviceSetEvent>;

export interface ComposeHashAddedEventObject {
  composeHash: string;
}
export type ComposeHashAddedEvent = TypedEvent<
  [string],
  ComposeHashAddedEventObject
>;

export type ComposeHashAddedEventFilter =
  TypedEventFilter<ComposeHashAddedEvent>;

export interface ComposeHashRemovedEventObject {
  composeHash: string;
}
export type ComposeHashRemovedEvent = TypedEvent<
  [string],
  ComposeHashRemovedEventObject
>;

export type ComposeHashRemovedEventFilter =
  TypedEventFilter<ComposeHashRemovedEvent>;

export interface DeviceAddedEventObject {
  deviceId: string;
}
export type DeviceAddedEvent = TypedEvent<[string], DeviceAddedEventObject>;

export type DeviceAddedEventFilter = TypedEventFilter<DeviceAddedEvent>;

export interface DeviceRemovedEventObject {
  deviceId: string;
}
export type DeviceRemovedEvent = TypedEvent<[string], DeviceRemovedEventObject>;

export type DeviceRemovedEventFilter = TypedEventFilter<DeviceRemovedEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface UpgradesDisabledEventObject {}
export type UpgradesDisabledEvent = TypedEvent<[], UpgradesDisabledEventObject>;

export type UpgradesDisabledEventFilter =
  TypedEventFilter<UpgradesDisabledEvent>;

export interface CrossmintAppAuth extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrossmintAppAuthInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    addComposeHash(
      composeHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addDevice(
      deviceId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowAnyDevice(overrides?: CallOverrides): Promise<[boolean]>;

    allowedComposeHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allowedDeviceIds(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    disableUpgrades(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      initialOwner: string,
      _appId: string,
      _disableUpgrades: boolean,
      _allowAnyDevice: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isAppAllowed(
      bootInfo: IAppAuth.AppBootInfoStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { isAllowed: boolean; reason: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeComposeHash(
      composeHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeDevice(
      deviceId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAllowAnyDevice(
      _allowAnyDevice: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

  addComposeHash(
    composeHash: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addDevice(
    deviceId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowAnyDevice(overrides?: CallOverrides): Promise<boolean>;

  allowedComposeHashes(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  allowedDeviceIds(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  appId(overrides?: CallOverrides): Promise<string>;

  disableUpgrades(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    initialOwner: string,
    _appId: string,
    _disableUpgrades: boolean,
    _allowAnyDevice: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isAppAllowed(
    bootInfo: IAppAuth.AppBootInfoStruct,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { isAllowed: boolean; reason: string }>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeComposeHash(
    composeHash: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeDevice(
    deviceId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAllowAnyDevice(
    _allowAnyDevice: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

    addComposeHash(
      composeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addDevice(deviceId: BytesLike, overrides?: CallOverrides): Promise<void>;

    allowAnyDevice(overrides?: CallOverrides): Promise<boolean>;

    allowedComposeHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowedDeviceIds(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    appId(overrides?: CallOverrides): Promise<string>;

    disableUpgrades(overrides?: CallOverrides): Promise<void>;

    initialize(
      initialOwner: string,
      _appId: string,
      _disableUpgrades: boolean,
      _allowAnyDevice: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    isAppAllowed(
      bootInfo: IAppAuth.AppBootInfoStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { isAllowed: boolean; reason: string }>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeComposeHash(
      composeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeDevice(deviceId: BytesLike, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAllowAnyDevice(
      _allowAnyDevice: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AllowAnyDeviceSet(bool)"(allowAny?: null): AllowAnyDeviceSetEventFilter;
    AllowAnyDeviceSet(allowAny?: null): AllowAnyDeviceSetEventFilter;

    "ComposeHashAdded(bytes32)"(
      composeHash?: null
    ): ComposeHashAddedEventFilter;
    ComposeHashAdded(composeHash?: null): ComposeHashAddedEventFilter;

    "ComposeHashRemoved(bytes32)"(
      composeHash?: null
    ): ComposeHashRemovedEventFilter;
    ComposeHashRemoved(composeHash?: null): ComposeHashRemovedEventFilter;

    "DeviceAdded(bytes32)"(deviceId?: null): DeviceAddedEventFilter;
    DeviceAdded(deviceId?: null): DeviceAddedEventFilter;

    "DeviceRemoved(bytes32)"(deviceId?: null): DeviceRemovedEventFilter;
    DeviceRemoved(deviceId?: null): DeviceRemovedEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "UpgradesDisabled()"(): UpgradesDisabledEventFilter;
    UpgradesDisabled(): UpgradesDisabledEventFilter;
  };

  estimateGas: {
    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addComposeHash(
      composeHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addDevice(
      deviceId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowAnyDevice(overrides?: CallOverrides): Promise<BigNumber>;

    allowedComposeHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedDeviceIds(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    disableUpgrades(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(
      initialOwner: string,
      _appId: string,
      _disableUpgrades: boolean,
      _allowAnyDevice: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isAppAllowed(
      bootInfo: IAppAuth.AppBootInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeComposeHash(
      composeHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeDevice(
      deviceId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAllowAnyDevice(
      _allowAnyDevice: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    UPGRADE_INTERFACE_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addComposeHash(
      composeHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addDevice(
      deviceId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowAnyDevice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedComposeHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedDeviceIds(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableUpgrades(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      initialOwner: string,
      _appId: string,
      _disableUpgrades: boolean,
      _allowAnyDevice: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isAppAllowed(
      bootInfo: IAppAuth.AppBootInfoStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeComposeHash(
      composeHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeDevice(
      deviceId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAllowAnyDevice(
      _allowAnyDevice: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
